name: CI

on:
  push:
    branches:
      - main

env:
  AWS_ACCOUNT_ID: "590184020311"
  AWS_ROLE: "arn:aws:iam::590184020311:role/GithubActionsRole"
  AWS_REGION: "eu-central-1"
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.6.1"

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with test --no-interaction
      - name: Analyse the code style with ruff
        run: |
          source .venv/bin/activate
          make ruff
      - name: Analyse typing with mypy
        run: |
          source .venv/bin/activate
          make mypy
      - name: Analyse security risks with bandit
        run: |
          source .venv/bin/activate
          make bandit

  build:
    needs: code-quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: GithubActionsSession
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            training:
              - 'training/**'
              - '.github/workflows/ci.yaml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci.yaml'
      - name: Build and push frontend image
        if: steps.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: frontend
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION}}
          platforms: linux/amd64 #,linux/arm64
          cache-from: type=registry,ref=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend:build-cache
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend:build-cache
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend:latest
      - name: Build and push training image
        if: steps.changes.outputs.training == 'true'
        uses: docker/build-push-action@v5
        with:
          context: training
          build-args: |
            OS_VERSION=ubuntu20.04
            CUDA_VERSION=12.3.1
            PYTHON_VERSION=${{ env.PYTHON_VERSION}}
          platforms: linux/amd64 #,linux/arm64
          cache-from: type=registry,ref=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/training:build-cache
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/training:build-cache
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/training:latest
